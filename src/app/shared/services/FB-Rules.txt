{
  "rules": {
    "cv-app": {
      "users": {
        // Reglas generales para el nodo users (solo lectura para admin)
        ".read": "auth != null && root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin'",
        ".write": false, // No permitir escritura en el nodo raíz
        
        // Reglas para cada usuario individual
        "$userEmailKey": {
          ".read": "auth != null && (auth.token.email.replace('.', '_') == $userEmailKey || root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin')",
          ".write": "auth != null && (auth.token.email.replace('.', '_') == $userEmailKey || root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin')",
          
          // Subnodos específicos
          "metadata": {
            ".read": "auth != null",
            ".write": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey || root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin'"
          },
          
          "profileData": {
            ".read": "auth != null",
            ".write": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey"
          },
          
          "cv-styles": {
            ".read": "auth != null",
            ".write": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey"
          }
        }
      }
    }
  }
}

=====================================================================================================

{
  "rules": {
    "cv-app": {
      "users": {
        ".read": "auth != null && root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin'",
        ".write": false,
        
        "$userEmailKey": {
          ".read": "auth != null && (auth.token.email.replace('.', '_') == $userEmailKey || root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin')",
          ".write": "auth != null && (auth.token.email.replace('.', '_') == $userEmailKey || root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin')",
          
          "metadata": {
            ".read": "auth != null",
            ".write": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey || root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin'",
            "referredBy": {
              ".read": "auth != null"
            }
          },
          
          "profileData": {
            ".read": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey",
            ".write": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey"
          }
        }
      },
      
      "referrals": {
        "$referrerId": {
          ".read": "auth != null && (root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/userId').val() == $referrerId || root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin')",
          ".write": "auth != null && root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/userId').val() == $referrerId",
          ".validate": "root.child('cv-app/users').child(newData.child('email').val().replace('.', '_')).exists()",
          
          "$referredEmailKey": {
            ".read": "auth != null",
            ".write": "auth != null && root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/userId').val() == $referrerId",
            ".validate": "newData.hasChildren(['email', 'date', 'status']) && newData.child('email').val().matches(/^[^@]+@[^@]+\\.[^@]+$/)"
          }
        }
      }
    }
  }
}