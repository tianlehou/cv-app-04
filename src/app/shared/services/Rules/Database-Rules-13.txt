{
  "rules": {
    "cv-app": {
      "users": {
        // Reglas generales para el nodo users (solo lectura para admin y business)
        ".read": "auth != null &&
          (root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin' ||
          root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'business')",
        ".write": false, // No permitir escritura en el nodo raíz
        
        // Reglas para cada usuario individual
        "$userEmailKey": {
          ".read": "auth != null && (
            auth.token.email.replace('.', '_') == $userEmailKey ||
            root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin' ||
            (root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'business' &&
             root.child('cv-app/users/' + $userEmailKey + '/metadata/role').val() === 'candidate')
          )",
          
          // Permitir escritura inicial si el nodo no existe (durante registro)
          ".write": "auth != null && (
            (auth.token.email.replace('.', '_') == $userEmailKey && !data.exists()) ||
            root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin'
          )",

          // Subnodos específicos
          "metadata": {
            ".read": "auth != null && (
              auth.token.email.replace('.', '_') == $userEmailKey ||
              root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin' ||
              (root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'business' &&
               root.child('cv-app/users/' + $userEmailKey + '/metadata/role').val() === 'candidate')
            )",
            ".write": "auth != null && (
              auth.token.email.replace('.', '_') == $userEmailKey ||
              root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin'
            )"
          },

          "planes_adquiridos": {
            ".read": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey",
            ".write": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey"
          },
          
          "profileData": {
            ".read": "auth != null && (
              auth.token.email.replace('.', '_') == $userEmailKey ||
              root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin' ||
              (root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'business' &&
               root.child('cv-app/users/' + $userEmailKey + '/metadata/role').val() === 'candidate')
            )",
            ".write": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey"
          },
          
          "cv-styles": {
            ".read": "auth != null",
            ".write": "auth != null && auth.token.email.replace('.', '_') == $userEmailKey"
          }
        }
      },

      // Agrega estas nuevas reglas para countriesIndex
      "countriesIndex": {
        ".read": "auth != null",
        "$countryCode": {
          ".write": "auth != null && 
            (root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin' ||
            newData.child(auth.token.email.replace('.', '_')).exists() === true ||
            data.child(auth.token.email.replace('.', '_')).exists() === true)",
          
          "$userEmailKey": {
            ".validate": "newData.isBoolean() && newData.val() === true"
          }
        }
      },

      // Nuevo nodo para el índice de userId a emailKey
      "userIndex": {
        "userId-to-emailKey": {
          ".read": "auth != null",
          "$userId": {
            ".write": "auth != null && (
              root.child('cv-app/users/' + auth.token.email.replace('.','_') + '/metadata/role').val() === 'admin' || 
              (newData.val() != null && root.child('cv-app/users/' + newData.val() + '/metadata/userId').val() == $userId)
            )"
          }
        }
      },

      "referrals": {
        ".read": "auth != null",
        ".write": "auth != null", // Permite escritura a cualquier usuario autenticado
        
        "$referrerEmailKey": {
          ".read": "auth != null && (
            auth.token.email.replace('.', '_') == $referrerEmailKey ||
            root.child('cv-app/users/' + auth.token.email.replace('.', '_') + '/metadata/role').val() === 'admin'
          )",

          ".write": "auth != null && (

            // Permite al referente actualizar sus propios referidos
            auth.token.email.replace('.', '_') == $referrerEmailKey ||
            
            // Permite al referido actualizar su propia entrada (para suscripciones)
            newData.child('email').val() == auth.token.email
          )",
          
          "count": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          
          "referrals": {
            "$referredEmailKey": {
              ".validate": "newData.hasChildren(['email', 'timestamp', 'fullName', 'subscriptionAmount', 'subscribed'])",
              
              "email": {
                ".validate": "newData.isString() && newData.val().matches(/^[^@]+@[^@]+\\.[^@]+$/)"
              },

              "timestamp": {
                ".validate": "newData.isString()"
              },

              "fullName": {
                ".validate": "newData.isString()"
              },

              "subscriptionAmount": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              },

              "subscribed": {
                ".validate": "newData.isBoolean()"
              },

              "subscriptionDate": {
                ".validate": "newData.isString() || newData.val() == null"
              },

              "planId": {
                ".validate": "newData.isString() || newData.val() == null"
              }
            }
          }
        }
      }
    }
  }
}